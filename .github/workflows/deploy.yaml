name: deploy

on:
  push:
    branches:
      - renewal
#      - master   # 향후 master 변경 시 배포 설정 123

jobs:
  build:
    runs-on: ubuntu-latest      # Github Activations 실행할 환경

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2     # repository 체크아웃

      - name: Enable debug logging    # 로그
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      # Install yq to parse YAML
      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.14.1/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      # Parse cache path from docker-settings.yaml
      - name: Read cache path from docker-settings.yaml
        id: cache-path
        run: |
          CACHE_PATH=$(yq eval '.cache.path' docker-settings.yaml)   # 파일 경로에 맞게 수정
          echo "CACHE_PATH=$CACHE_PATH" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2   # Docker Buildx 설정

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_PATH }}/.buildx-cache  # Docker 캐시 경로
          key: ${{ runner.os }}-docker-${{ hashFiles('backend/Dockerfile') }}-${{ hashFiles('backend/**') }}-${{ github.sha }}   # 캐시 키
          restore-keys: |
            key: ${{ runner.os }}-docker-${{ hashFiles('backend/Dockerfile') }}-${{ hashFiles('backend/**') }}
            ${{ runner.os }}-docker-${{ hashFiles('backend/Dockerfile') }}
            ${{ runner.os }}-docker-
#
      - name: Build Docker image with caching
        # backend/. 루트 변경 확인 (root에 위치한 Dockerfile 실행 시 변경)
        run: |
          docker buildx build \
            --cache-from=type=local,src=${{ env.CACHE_PATH }}/.buildx-cache \
            --cache-to=type=local,dest=${{ env.CACHE_PATH }}/.buildx-cache \
            --tag snapster-app:latest \
            --file backend/Dockerfile \
            backend/. \
            --load \
            --progress=plain

      - name: Log into AWS (EC2)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub Secrets에서 AWS 키를 설정해야 합니다.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # GitHub Secrets에서 AWS 키를 설정해야 합니다.
          aws-region: us-east-1  # EC2가 있는 AWS 리전

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ec2-3-34-253-46.ap-northeast-2.compute.amazonaws.com >> ~/.ssh/known_hosts

      - name: Copy Docker image to EC2
        run: |
          docker save snapster-app | gzip > snapster-app.tar.gz
          scp -i ~/.ssh/id_rsa snapster-app.tar.gz ec2-user@ec2-3-34-253-46.ap-northeast-2.compute.amazonaws.com:/home/ec2-user/snapster/docker

      - name: SSH into EC2 and Deploy Docker container
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@ec2-3-34-253-46.ap-northeast-2.compute.amazonaws.com <<EOF
            REPOSITORY=/home/ec2-user/snapster/docker
            CONTAINER=snapster-container
            IMAGE=snapster-app
            DOCKER_RUN="docker run -d --rm --name $CONTAINER -p 80:80 $IMAGE:latest"
            
            run_docker() {
              local error_message=$1
              $DOCKER_RUN
              if [ $? -ne 0 ]; then
                echo "$error_message"
                exit 1
              fi
            }
          
            # 실행중인 snapster-container 중지 (존재하면)
            if docker ps | grep -q $CONTAINER; then
              docker stop $CONTAINER
            else
              echo "No running container"
            fi
          
            # 기존 이미지 삭제 (존재하면)
            if docker images | grep -q $IMAGE; then
              docker rmi $IMAGE
              if [ $? -ne 0 ]; then
              echo "Failed to remove image"
              run_docker "Failed to restart previous container"
              exit 1
              fi
            else
              echo "No existing image"
            fi
          
            # 실행되지 않는 컨테이너 전부 정리
            docker container prune -f
          
            docker load < $REPOSITORY/$IMAGE.tar.gz
            if [ $? -ne 0 ]; then
              echo "Failed to load image"
              run_docker "Failed to restart previous container"
              exit 1
            fi
          
            # 새로운 컨테이너 실행
            run_docker "Failed to run container after loading image"
          
            cp $REPOSITORY/snapster-app.tar.gz $REPOSITORY/tar_backups/snapster-app.tar.gz
            docker ps
          EOF
            



